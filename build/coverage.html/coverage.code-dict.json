{"/home/travis/build/npmtest/node-npmtest-homebridge-foscamcamera/test.js":"/* istanbul instrument in package npmtest_homebridge_foscamcamera */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-foscamcamera/lib.npmtest_homebridge_foscamcamera.js":"/* istanbul instrument in package npmtest_homebridge_foscamcamera */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_foscamcamera = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_foscamcamera = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-foscamcamera/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-foscamcamera && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_foscamcamera */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_foscamcamera\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_foscamcamera.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_foscamcamera.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_foscamcamera.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_foscamcamera.__dirname + '/lib.npmtest_homebridge_foscamcamera.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-foscamcamera/node_modules/homebridge-foscamcamera/index.js":"var FoscamAccessory = require(\"homebridge-foscam-stream\").FoscamAccessory;\nvar Foscam = require(\"foscam-client\");\nvar Accessory, Service, Characteristic, UUIDGen, hap;\n\nmodule.exports = function (homebridge) {\n  Accessory = homebridge.platformAccessory;\n  Service = homebridge.hap.Service;\n  Characteristic = homebridge.hap.Characteristic;\n  UUIDGen = homebridge.hap.uuid;\n  hap = homebridge.hap;\n\n  homebridge.registerPlatform(\"homebridge-foscamcamera\", \"FoscamCamera\", FoscamPlatform, true);\n}\n\nfunction FoscamPlatform(log, config, api) {\n  this.log = log;\n  this.config = config || {\"platform\": \"FoscamCamera\"};\n  this.cameras = this.config.cameras || [];\n\n  // HomeKit Current State: 0 (STAY_ARM), 1 (AWAY_ARM), 2 (NIGHT_ARM), 3 (DISARMED), 4 (ALARM_TRIGGERED)\n  this.armState = [\"armed (stay).\", \"armed (away).\", \"armed (night).\", \"disarmed.\", \"alarm triggered.\"];\n\n  // Camera motion sensor sensitivity\n  this.sensitivity = [4, 3, 0, 1, 2];\n\n  // Global cache\n  this.accessories = {};\n  this.foscamAPI = {};\n  this.cameraInfo = {};\n\n  if (api) {\n    this.api = api;\n    if (api.version < 2.1) throw new Error(\"Unexpected API version.\");\n    this.api.on('didFinishLaunching', this.didFinishLaunching.bind(this));\n  }\n}\n\nFoscamPlatform.prototype.configureAccessory = function (accessory) {\n  // Won't be invoked\n}\n\n// Method to setup accessories from config.json\nFoscamPlatform.prototype.didFinishLaunching = function () {\n  var self = this;\n\n  if (this.cameras) {\n    this.cameras.forEach(function (cameraConfig) {\n      if (cameraConfig.password && cameraConfig.host) {\n        self.getInfo(cameraConfig, function (mac, error) {\n          if (!error) {\n            self.configureCamera(mac);\n          } else {\n            self.log(error);\n          }\n        });\n      } else {\n        self.log(\"Missing Required Information!\");\n      }\n    });\n  }\n}\n\n// Method to detect Foscam camera info and API version\nFoscamPlatform.prototype.getInfo = function (cameraConfig, callback) {\n  var self = this;\n\n  // Setup for foscam-client\n  var thisFoscamAPI = new Foscam({\n    username: cameraConfig.username,\n    password: cameraConfig.password,\n    host: cameraConfig.host,\n    port: cameraConfig.port,\n    protocol: 'http',\n    rejectUnauthorizedCerts: true\n  });\n\n  // Retrieve camera info\n  Promise.all([thisFoscamAPI.getDevInfo(), thisFoscamAPI.getMotionDetectConfig(), thisFoscamAPI.getMotionDetectConfig1()]).then(function (output) {\n    var info = output[0];\n\n    if (info.result === 0) {\n      // Create a copy of config\n      var thisCamera = JSON.parse(JSON.stringify(cameraConfig));\n      var config, linkageMask;\n\n      if (output[1].result === 0) {\n        // Older API\n        config = output[1];\n        linkageMask = 0x0f;\n        thisCamera.version = 0;\n      } else if (output[2].result === 0) {\n        // Newer API\n        config = output[2];\n        linkageMask = 0xff;\n        thisCamera.version = 1;\n      }\n      \n      // Initialize default config\n      thisCamera.username = cameraConfig.username || \"admin\";\n      thisCamera.port = cameraConfig.port || 88;\n      thisCamera.linkage = [cameraConfig.stay || 0, cameraConfig.away || 0, cameraConfig.night || 0];\n      thisCamera.linkage = thisCamera.linkage.map(function (k) {return (k & linkageMask)});\n\n      // Compute sensivity\n      if (thisCamera.sensitivity < 0 || thisCamera.sensitivity > 4) {\n        throw new Error(\"Sensitivity \" + thisCamera.sensitivity + \" is out of range.\");\n      } else if (thisCamera.sensitivity === undefined) {\n        thisCamera.sensitivity = self.sensitivity.indexOf(config.sensitivity);\n      }\n\n      // Compute triggerInterval\n      if (thisCamera.triggerInterval < 5 || thisCamera.triggerInterval > 15) {\n        throw new Error(\"Trigger interval \" + thisCamera.triggerInterval + \" is out of range.\");\n      } else if (thisCamera.triggerInterval === undefined) {\n        thisCamera.triggerInterval = config.triggerInterval + 5;\n      }\n\n      // Setup config for 2-way audio\n      thisCamera.speaker = {\n        \"enabled\": cameraConfig.spkrEnable !== false,\n        \"compression\": cameraConfig.spkrCompression !== false,\n        \"gain\": cameraConfig.spkrGain || 0\n      };\n\n      // Remove unnecessary config\n      delete thisCamera.stay;\n      delete thisCamera.away;\n      delete thisCamera.night;\n      delete thisCamera.spkrEnable;\n      delete thisCamera.spkrCompression;\n      delete thisCamera.spkrGain;\n      delete thisCamera.motionDetector;\n\n      // Store camera information\n      thisCamera.name = info.devName.toString();\n      thisCamera.model = info.productName.toString();\n      thisCamera.serial = info.serialNo.toString();\n      thisCamera.fw = info.firmwareVer.toString();\n      thisCamera.hw = info.hardwareVer.toString();\n\n      // Initialize global cache\n      thisCamera.currentState = Characteristic.SecuritySystemCurrentState.DISARMED;\n      thisCamera.motionAlarm = false;\n      thisCamera.statusActive = 0;\n\n      // Workaround for empty serial number\n      if (thisCamera.serial === \"\") thisCamera.serial = \"Default-SerialNumber\";\n\n      // Store information to global\n      self.foscamAPI[info.mac] = thisFoscamAPI;\n      self.cameraInfo[info.mac] = thisCamera;\n      callback(info.mac);\n    } else {\n      callback(null, \"Failed to retrieve camera information!\");\n    }\n  });\n}\n\n// Method to configure camera info for HomeKit\nFoscamPlatform.prototype.configureCamera = function (mac) {\n  var self = this;\n  var thisCamera = this.cameraInfo[mac];\n  var name = \"Foscam \" + thisCamera.name;\n  var uuid = UUIDGen.generate(mac);\n\n  this.log(\"Initializing platform accessory '\" + name + \"'...\");\n\n  // Setup for FoscamAccessory\n  var cameraSource = new FoscamAccessory(hap, thisCamera, this.log);\n  cameraSource.info().then(function () {\n    // Setup accessory as CAMERA (17) category\n    var newAccessory = new Accessory(name, uuid, 17);\n    newAccessory.configureCameraSource(cameraSource);\n\n    // Add HomeKit Security System Service\n    newAccessory.addService(Service.SecuritySystem, name + \" Motion Detection\");\n\n    // Add HomeKit Motion Sensor Service\n    newAccessory.addService(Service.MotionSensor, name + \" Motion Sensor\");\n\n    // Setup listeners for different events\n    self.setService(newAccessory, mac);\n\n    // Publish accessories to HomeKit\n    self.api.publishCameraAccessories(\"FoscamCamera\", [newAccessory]);\n\n    // Store accessory in cache\n    self.accessories[mac] = newAccessory;\n\n    // Retrieve initial state\n    self.getInitState(newAccessory, thisCamera);\n  });\n}\n\n// Method to setup listeners for different events\nFoscamPlatform.prototype.setService = function (accessory, mac) {\n  // Setup listeners for Security System events\n  accessory.getService(Service.SecuritySystem)\n    .getCharacteristic(Characteristic.SecuritySystemCurrentState)\n    .on('get', this.getCurrentState.bind(this, mac));\n\n  accessory.getService(Service.SecuritySystem)\n    .getCharacteristic(Characteristic.SecuritySystemTargetState)\n    .on('get', this.getTargetState.bind(this, mac))\n    .on('set', this.setTargetState.bind(this, mac));\n\n  accessory.getService(Service.SecuritySystem)\n    .getCharacteristic(Characteristic.StatusFault);\n\n  // Setup listeners for Motion Sensor events\n  accessory.getService(Service.MotionSensor)\n    .getCharacteristic(Characteristic.MotionDetected)\n    .on('get', this.getMotionDetected.bind(this, mac));\n\n  accessory.getService(Service.MotionSensor)\n    .getCharacteristic(Characteristic.StatusActive);\n\n  accessory.getService(Service.MotionSensor)\n    .getCharacteristic(Characteristic.StatusFault);\n\n  // Setup additional Accessory Information\n  accessory.getService(Service.AccessoryInformation)\n    .getCharacteristic(Characteristic.FirmwareRevision);\n\n  accessory.getService(Service.AccessoryInformation)\n    .getCharacteristic(Characteristic.HardwareRevision);\n\n  accessory.on('identify', this.identify.bind(this, mac));\n}\n\n// Method to retrieve initial state\nFoscamPlatform.prototype.getInitState = function (accessory, info) {\n  // Update HomeKit accessory information\n  accessory.getService(Service.AccessoryInformation)\n    .setCharacteristic(Characteristic.Manufacturer, \"Foscam Digital Technologies LLC\")\n    .setCharacteristic(Characteristic.Model, info.model)\n    .setCharacteristic(Characteristic.SerialNumber, info.serial)\n    .setCharacteristic(Characteristic.FirmwareRevision, info.fw)\n    .setCharacteristic(Characteristic.HardwareRevision, info.hw);\n\n  // Retrieve initial state\n  accessory.getService(Service.SecuritySystem)\n    .getCharacteristic(Characteristic.SecuritySystemCurrentState)\n    .getValue();\n\n  accessory.getService(Service.SecuritySystem)\n    .getCharacteristic(Characteristic.SecuritySystemTargetState)\n    .getValue();\n\n  accessory.getService(Service.MotionSensor)\n    .getCharacteristic(Characteristic.MotionDetected)\n    .getValue();\n}\n\n// Method to get the security system current state\nFoscamPlatform.prototype.getCurrentState = function (mac, callback) {\n  var self = this;\n  var thisFoscamAPI = this.foscamAPI[mac];\n  var thisCamera = this.cameraInfo[mac];\n  var thisAccessory = this.accessories[mac];\n\n  if (thisCamera.version === 0) {\n    var getConfig = thisFoscamAPI.getMotionDetectConfig();\n  } else if (thisCamera.version === 1) {\n    var getConfig = thisFoscamAPI.getMotionDetectConfig1();\n  }\n\n  getConfig.then(function (config) {\n    if (config.result === 0) {\n      // Compute current state and target state\n      if (config.isEnable === 0) {\n        thisCamera.currentState = Characteristic.SecuritySystemCurrentState.DISARMED;\n      } else {\n        if (thisCamera.linkage.indexOf(config.linkage) >= 0) {\n          thisCamera.currentState = thisCamera.linkage.indexOf(config.linkage);\n        } else {\n          thisCamera.currentState = Characteristic.SecuritySystemCurrentState.STAY_ARM;\n        }\n      }\n\n      // Configre motion polling\n      self.startMotionPolling(mac);\n\n      // Set motion sensor status active\n      thisAccessory.getService(Service.MotionSensor)\n        .setCharacteristic(Characteristic.StatusActive, config.isEnable ? true : false);\n\n      // Set security system status fault\n      thisAccessory.getService(Service.SecuritySystem)\n        .setCharacteristic(Characteristic.StatusFault, 0);\n\n      self.log(thisCamera.name + \" is \" + self.armState[thisCamera.currentState]);\n      callback(null, thisCamera.currentState);\n    } else {\n      var error = \"Failed to retrieve \" + thisCamera.name + \" state!\";\n\n      // Set security system status fault to 1 in case of error\n      thisAccessory.getService(Service.SecuritySystem)\n        .setCharacteristic(Characteristic.StatusFault, 1);\n\n      self.log(error);\n      callback(new Error(error));\n    }\n  });\n}\n\n// Method to get the security system target state\nFoscamPlatform.prototype.getTargetState = function (mac, callback) {\n  var self = this;\n\n  setTimeout(function () {\n    callback(null, self.cameraInfo[mac].currentState);\n  }, 1000);\n}\n\n// Method to set the security system target state\nFoscamPlatform.prototype.setTargetState = function (mac, state, callback) {\n  var self = this;\n  var thisFoscamAPI = this.foscamAPI[mac];\n  var thisCamera = this.cameraInfo[mac];\n  var thisAccessory = this.accessories[mac];\n\n  // Convert target state to isEnable\n  var enable = state < 3 ? 1 : 0;\n\n  if (thisCamera.version === 0) {\n    var getConfig = thisFoscamAPI.getMotionDetectConfig();\n    var setConfig = function (config) {thisFoscamAPI.setMotionDetectConfig(config);};\n  } else if (thisCamera.version === 1) {\n    var getConfig = thisFoscamAPI.getMotionDetectConfig1();\n    var setConfig = function (config) {thisFoscamAPI.setMotionDetectConfig1(config);};\n  }\n\n  // Get current config\n  getConfig.then(function (config) {\n    if (config.result === 0) {\n      // Change isEnable, linkage, sensitivity, triggerInterval to requested state\n      config.isEnable = enable;\n      if (enable) config.linkage = thisCamera.linkage[state];\n      config.sensitivity = self.sensitivity[thisCamera.sensitivity];\n      config.triggerInterval = thisCamera.triggerInterval - 5;\n\n      // Update config with requested state\n      setConfig(config);\n\n      // Set motion sensor status\n      thisAccessory.getService(Service.MotionSensor)\n        .setCharacteristic(Characteristic.StatusActive, enable ? true : false);\n\n      // Set security system current state\n      thisCamera.currentState = state;\n      thisAccessory.getService(Service.SecuritySystem)\n        .setCharacteristic(Characteristic.SecuritySystemCurrentState, state);\n\n      // Configure motion polling\n      self.startMotionPolling(mac);\n\n      // Set status fault\n      thisAccessory.getService(Service.SecuritySystem)\n        .setCharacteristic(Characteristic.StatusFault, 0);\n\n      self.log(thisCamera.name + \" is set to \" + self.armState[state]);\n      callback(null);\n    } else {\n      var error = \"Failed to set \" + thisCamera.name + \" state!\";\n\n      // Set status fault to 1 in case of error\n      thisAccessory.getService(Service.SecuritySystem)\n        .setCharacteristic(Characteristic.StatusFault, 1);\n\n      self.log(error);\n      callback(new Error(error));\n    }\n  });\n}\n\n// Method to get the motion sensor motion detected\nFoscamPlatform.prototype.getMotionDetected = function (mac, callback) {\n  callback(null, this.cameraInfo[mac].motionAlarm);\n}\n\n// Method to handle identify request\nFoscamPlatform.prototype.identify = function (mac, paired, callback) {\n  this.log(this.cameraInfo[mac].name + \" identify requested!\");\n  callback();\n}\n\n// Method to start polling for motion\nFoscamPlatform.prototype.startMotionPolling = function (mac) {\n  var self = this;\n  var thisFoscamAPI = this.foscamAPI[mac];\n  var thisCamera = this.cameraInfo[mac];\n\n  // Clear polling\n  clearTimeout(thisCamera.polling);\n\n  // Start polling if armed\n  if (thisCamera.currentState !== 3) {\n    thisFoscamAPI.getDevState().then(function (state) {\n      if (state.motionDetectAlarm === 2) self.motionDetected(mac);\n    });\n\n    // Setup next polling\n    thisCamera.polling = setTimeout(this.startMotionPolling.bind(this, mac), 1000);\n  }\n}\n\n// Method to configure motion sensor when motion is detected\nFoscamPlatform.prototype.motionDetected = function (mac) {\n  var thisCamera = this.cameraInfo[mac];\n  var thisAccessory = this.accessories[mac];\n\n  // Clear motion reset\n  clearTimeout(thisCamera.resetMotion);\n\n  // Set motion detected\n  if (thisCamera.motionAlarm === false) {\n    this.log(thisCamera.name + \" Motion Detected!\");\n    thisCamera.motionAlarm = true;\n    thisAccessory.getService(Service.MotionSensor)\n      .setCharacteristic(Characteristic.MotionDetected, thisCamera.motionAlarm);\n  }\n\n  // Reset motion detected after trigger interval\n  thisCamera.resetMotion = setTimeout(function () {\n    thisCamera.motionAlarm = false;\n    thisAccessory.getService(Service.MotionSensor)\n      .setCharacteristic(Characteristic.MotionDetected, thisCamera.motionAlarm);\n  }, (thisCamera.triggerInterval - 1) * 1000);\n}\n"}